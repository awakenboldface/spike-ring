# Clojure CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-clojure/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: slander/clojure-docker

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      LEIN_ROOT: "true"
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m

    auth:
    #Put the contents of keyfile.json into an environment variable for the build called GCR_CREDS, which is then passed in.
      username: _json_key
      password: $GOOGLE_AUTH

    steps:
      - checkout

      - run:
          name: Dump Google Cloud Credentials to file
          command: echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json

      - run:
          name: Configure gcloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "project.clj" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: lein deps

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "project.clj" }}

      # run tests!
      - run: lein test

      - run: lein uberjar

      - setup_remote_docker:   # (2)
          docker_layer_caching: true # (3)

      - run:
          name: Copy jar
          command: |
            cp target/uberjar/spike-ring.jar docker/spike-ring/spike-ring.jar

      - run:
          name: Push image
          command: |
            docker build -t gcr.io/sanguine-frame-189801/spike-ring:${CIRCLE_TAG} docker/spike-ring
            gcloud docker -- push gcr.io/sanguine-frame-189801/spike-ring:${CIRCLE_TAG}

      - run: |
          docker run -d --name spike-ring gcr.io/sanguine-frame-189801/spike-ring
          docker exec spike-ring wget --retry-connrefused -T 10 http://localhost:8080

workflows:
  version: 2
  build:
    jobs:
      - build:
          filters:
            branches:
              only: develop
            tags:
              only: /.+/
