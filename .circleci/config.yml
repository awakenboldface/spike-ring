# Clojure CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-clojure/ for more details
#
version: 2
jobs:
  clojure:
    docker:
      # specify the version you desire here
      - image: slander/clojure-docker

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      LEIN_ROOT: "true"
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "project.clj" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: lein deps

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "project.clj" }}

      # run tests!
      - run: lein test

      - run: lein uberjar

      - setup_remote_docker:   # (2)
          docker_layer_caching: true # (3)

      - run:
          name: Push image
          command: |
            if [ -z "$CIRCLE_TAG" ]; then
              docker build -t slander/spike-ring .
              docker run -d --name spike-ring slander/spike-ring
              docker exec spike-ring wget --header='Content-type: application/edn' --post-data='{:text "Hello world"}' --retry-connrefused -T 10 http://localhost:8080
            else
              docker build -t slander/spike-ring:$CIRCLE_TAG .
              docker run -d --name spike-ring slander/spike-ring:$CIRCLE_TAG
              docker exec spike-ring wget --header='Content-type: application/edn' --post-data='{:text "Hello world"}' --retry-connrefused -T 10 http://localhost:8080
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker push slander/spike-ring:$CIRCLE_TAG
            fi

  python:
    docker:
      # specify the version you desire here
      - image: slander/clojure-docker

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    # TODO Use ~/repo/python
    working_directory: ~/repo

    environment:
      MODEL_VERSION: 0.1.0

    auth:
    #Put the contents of keyfile.json into an environment variable for the build called GCR_CREDS, which is then passed in.
      username: _json_key
      password: $GOOGLE_AUTH

    steps:
      - checkout

      - run:
          name: Dump Google Cloud Credentials to file
          command: echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json

      - run:
          name: Configure gcloud
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}

      - restore_cache:
          keys:
          - model-$MODEL_VERSION

      - run:
          name: Download model
          command: |
            if [ ! -d "python/model" ]; then
              mkdir python/model
              gsutil cp gs://spike-ring/$MODEL_VERSION/* python/model/
            fi

      - save_cache:
          paths:
            - python/model
          key: model-$MODEL_VERSION

      - setup_remote_docker:   # (2)
          docker_layer_caching: true # (3)

      - run:
          name: Push image
          command: |
            cd python
            if [ -z "$CIRCLE_TAG" ]; then
              docker build -t slander/spike-python .
              docker run -d --name spike-python slander/spike-python
              wget --header='Content-type: application/json' --post-data='{"action": "parse", "input": "Hello world"}' --retry-connrefused -T 10 http://localhost:5000
            else
              docker build -t slander/spike-python:$CIRCLE_TAG .
              docker run -d --name spike-python slander/spike-python:$CIRCLE_TAG
              wget --header='Content-type: application/json' --post-data='{"action": "parse", "input": "Hello world"}' --retry-connrefused -T 10 http://localhost:5000
            fi


workflows:
  version: 2
  clojure:
    jobs:
      - clojure:
          filters:
            tags:
              only: /.+/
  python:
    jobs:
      - python:
          filters:
            tags:
              only: /.+/
